class Person
class Drink
class Round extends dict, 
 - inherits its properties and methods
 - iterable now and key:val by design

 SpaceBar 2.0: Person class
        methods: can order a drink

Remember with ITIL study, had to go over it until it clicked.
Same here with OOP / testing

2.x: Person class methods have test coverage (and other stuff)

Remember PEP8 style guides

#### Steps for creating programs
# 1. think in terms of v0.1, v0.2 etc. Incremental changes to objects/functionality
# 2. use pseudocode to get an idea of how things should interact. and understand the a->b loop until a particular vertical slice is completed.

write class hierarchy diagrams / UML (or whatever) to understand how the objects interact.

# REMEMBER: DOCSTRINGS / comments
# Given, When, Then . . .
# DRY / SOLID etc.

'''
SPACEBAR notes:

so we want to be able to populate the menu at will.
For all drink

receipt_printer():
for person in People:
    for order in Orders:
        receipt.add(order) # which will add the __str__ of the order and the price

drinks_menu_printer():

all drinks are contained in a list or dict of Drink objects?
drink objects have characteristics i.e. name, price, etc.

for drink in Drinks:
    drinks
'''



'''
So we just recreate the functionality we need.
i.e. we need a way to deal cards, clear the deck, add cards to the deck.

'''


_____________ old notes below



# Upload Prezi slide online ?

#~~~~~~~~~~ MUST: 
# TODO (ongoing): Look for places in the code where you can make the code more readable / "read like a story"

#~~~~~~~~~~ SHOULD:


#~~~~~~~~~~ COULD:

# TODO: Create new branch and refactor menu_response function into a dictionary of text:function pairs?

# TODO: reimplement Drinks as a Drinks Class.
        # Subclass for hot drinks / cold drinks
        # Add column for hot/cold drinks in drinks table
        # Add column (bool) for alcoholic/not
        # Ask user if they want to see hot drinks or cold drinks table.
        # Hot drinks also have additional properties: milk, sugar, complementary biscuit.

# TODO BRANCH: Persist Round information in the db (
        # Round table
        # Give each instance of Round a UniqueID ("bill_payer" + datetime of instance initialisation)
        # Then add the roundID, name, drink to table
        # Keep track of each unique instance ID

# TODO: Round: set drink_pref as default drink choice?

# TODO: Round: add receipt output

# TODO: Unit testing / Pytest

# TODO: Change "Add drink" to "check if a drink you like is in stock."
        # Check what user added against a SET of many more drinks. If in stock: return it, add to db, load from db.
        # Store "drink stock" in the built-in Python db? Or use CSV / JSON?

# TODO: Make intro words write onto the screen character-by-character as though they were typed.